#h2 console 활성화 및 경로 설정
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

#h2 db 설정
#h2:mem:test 부분을 h2:~/test로 하는 경우 test DB파일이 생성되고 해당 파일에 데이터 베이스 정보가 저장 되어 서버 재기동시에도 내용이 유지 됩니다.
#mem으로 하는 경우 메모리DB를 사용하여 서버 기동중에만 모든 데이터가 영향을 받게 됩니다.
spring.datasource.url=jdbc:h2:mem:test;
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
#h2 db는 설치형이 아니여서 비밀번호 없이 접속 가능 합니다.
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
#schema.sql, data.sql 파일 등 초기화 sql 파일 실행을 원하는 경우 spring.sql.init.mode=always 설정을 추가 해주면 됩니다.
#원하지 않는 경우 naver로 설정 해주면 됩니다.
spring.sql.init.mode=always
#jpa 설정을 통해서 domain정보를 database에 create,update,delete하고자 하는 경우 아래의 spring.jpa.generate-ddl 설정을 통해서 가능 합니다.
#해당 설정은 hibernate(spring.jpa.hibernate.ddl-auto)설정과 혼용 해서는 안됩니다.
#spring.jpa.generate-ddl=true
#spring-boot 2.5이상 부터는 hibernate설정을 통해서 create하고 data.sql을 이용해서 insert하려고 하면 에러가 발생 됩니다.
#실행 시점의 차이로 data.sql이 2.4이하 버전에서는 hibernate create후 실행 되던게 이전으로 변경 되면서 발생되는 문제로
#spring.jpa.defer-datasource-initialization 이 설정을 통해서 처리 가능 합니다.
#spring.jpa.defer-datasource-initialization=false

#hibernate 설정 sql 줄바꿈 등 보기 좋게 출력 설정(format_sql) 및 로그 출력(show_sql) 여부 sql설명 추가(use_sql_comments)
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.hibernate.ddl-auto=none
#spring.jpa.properties.hibernate.use_sql_comments=true
#? 에 어떤 파라미터가 세팅 되었는지 알고 싶은 경우 설정 logging.level.org.hibernate.type.descriptor.sql=trace
#logging.level.org.hibernate.type.descriptor.sql=trace

#공공데이터포털 이용시 사용할 서비스key 기본 설정키가 아니여서 경고발생
openApi.serviceKey=EtJfB1nu62e79mlcOeOOL8k49BIKChfZAdIc3PbFAfIzM6yLr71kyikvvMdEyj7WAO1VExFUf0q2hdivC9upLQ==